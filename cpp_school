#include <iostream>
#include <limits>
#include <fstream>
#include <string>
#include <sstream>
#include <cstring>
#include <stdlib.h>

using namespace std;

// Linked list node structure
typedef struct Node
{
    int process;             // Process ID
    int arrival_time;        // Arrival time of the process
    int burst_time;          // Burst time of the process
    int priority;            // Priority of the process
    int turnaround_time;     // Turnaround time of the process
    int waiting_time;        // Waiting time of the process
    int time_remaining;      // Remaining time for the process (used in Round Robin)
    float average_time;      // Average time (not used)
    struct Node *next;       // Pointer to the next node in the linked list
} NODE;

NODE *head, *tail = NULL;  // Head and tail pointers for the linked list
// Validator for input options
int Validator(int option, int startLimit, int endLimit)
{
    if ((option <= startLimit || option <= endLimit) && (option != 0))
    {
        return true;
    }
    else
    {
        // Clear input buffer and ignore invalid input
        cin.clear();
        cin.ignore(numeric_limits<streamsize>::max(), '\n');
        return false;
    }
}

// Validator for time inputs
int timeValidator(int time)
{
    if (time == 0)
    {
        // Clear input buffer and ignore invalid time
        cin.clear();
        cin.ignore(numeric_limits<streamsize>::max(), '\n');
        return false;
    }
    else
    {
        return true;
    }
}