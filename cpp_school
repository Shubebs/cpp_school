// Global variable declaration
int globalVariable;

// Function definition

void myFunction() {
    // Access globalVariable here
}
int main() {
    // Access globalVariable here
    return 0;
}

#include <iostream>
#include <limits>
#include <fstream>
#include <string>
#include <sstream>
#include <cstring>
#include <stdlib.h>

using namespace std;

// Linked list node
typedef struct Node
{
    int process;
    int arrival_time;
    int burst_time;
    int priority;
    int turnaround_time;
    int waiting_time;
    int time_remaining;
    float average_time;
    struct Node *next;
} NODE;

NODE *head, *tail = NULL;

//validator
int Validator(int option, int startLimit, int endLimit)

{
    if ((option <= startLimit || option <= endLimit) && (option != 0))
    {
        return true;
    }
    else
    {
        cin.clear();
        cin.ignore(numeric_limits<streamsize>::max(), '\n');
        return false;
    }
}

int timeValidator(int time)

{
    if (time == 0)
    {
        cin.clear();
        cin.ignore(numeric_limits<streamsize>::max(), '\n');
        return false;
    }
    else
    {
        return true;
    }
}

void sortHandler(int method)

{

    NODE *current = head, *index = NULL;

    int temp, burst, prior;

    if (head == NULL)
    {
        return;
        }
    else
    {
        while (current != NULL)
        {
            index = current->next;

            while (index != NULL)
            {
                if (method == 1) //sort list according to arrival time
                {
                    if (current->arrival_time > index->arrival_time)
                    {
                        temp = current->arrival_time;
                        current->arrival_time = index->arrival_time;
                        index->arrival_time = temp;

                        burst = current->burst_time;
                        current->burst_time = index->burst_time;
                        index->burst_time = burst;

                        prior = current->priority;
                        current->priority = index->priority;
                        index->priority = prior;
                    }
                    }
                else if (method == 2) //sort list according to burst time
                {